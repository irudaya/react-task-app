{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { ADD, SUB } from '../actions/task.action';\nconst initialstatevalue = {\n  id: 0,\n  taskuuid: \"\",\n  title: \"\",\n  description: \"\",\n  status: \"\"\n};\nconst taskSlice = createSlice({\n  name: \"taskst\",\n  initialState: {\n    value: {\n      id: 0,\n      taskuuid: \"\",\n      title: \"\",\n      description: \"\",\n      status: \"\"\n    }\n  },\n  reducers: {\n    taskedit: (state, action) => {\n      switch (action.type) {\n        case ADD:\n          return {\n            title: action.payload\n          };\n        case SUB:\n          return {\n            description: action.payload\n          };\n        // case ADDSOME: return { count: state.count + action.payload }\n        // case SUBSOME: return { count: state.count - action.payload }\n        // case RESET: return { count: 0 }\n        default:\n          return state;\n      }\n      //state.value=action.payload\n    },\n    logout: state => {\n      state.value = initialstatevalue;\n    }\n  }\n});\nexport const {\n  taskedit,\n  logout\n} = taskSlice.actions;\nexport default taskSlice.reducer;\n\n// const CountReducer = (state = { count: 0 }, action) => {\n//     switch (action.type) {\n//       case ADD: return { count: state.count + 1 }\n//       case SUB: return { count: state.count - 1 }\n//       case ADDSOME: return { count: state.count + action.payload }\n//       case SUBSOME: return { count: state.count - action.payload }\n//       case RESET: return { count: 0 }\n//       default: return state\n//     }\n// }\n\n// export default CountReducer;","map":{"version":3,"names":["createSlice","ADD","SUB","initialstatevalue","id","taskuuid","title","description","status","taskSlice","name","initialState","value","reducers","taskedit","state","action","type","payload","logout","actions","reducer"],"sources":["D:/Patch/react/react-auth/src/features/taskst.tsx"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\nimport { ADD, SUB, ADDSOME, SUBSOME, RESET } from '../actions/task.action'\r\nconst initialstatevalue={id:0,taskuuid:\"\",title:\"\",description:\"\",status:\"\"};\r\n\r\nconst taskSlice=createSlice({\r\n    name:\"taskst\",\r\n    initialState:{value:{id:0,taskuuid:\"\",title:\"\",description:\"\",status:\"\"}},\r\n    reducers:{\r\n        taskedit:(state,action)=>{\r\n            switch (action.type) {\r\n                case ADD: return { title: action.payload }\r\n                case SUB: return { description:action.payload }\r\n                // case ADDSOME: return { count: state.count + action.payload }\r\n                // case SUBSOME: return { count: state.count - action.payload }\r\n                // case RESET: return { count: 0 }\r\n                default: return state\r\n              }\r\n            //state.value=action.payload\r\n        },\r\n        logout:(state)=>{\r\n            state.value=initialstatevalue;\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport const {taskedit,logout}= taskSlice.actions;\r\n\r\nexport default taskSlice.reducer;\r\n\r\n// const CountReducer = (state = { count: 0 }, action) => {\r\n//     switch (action.type) {\r\n//       case ADD: return { count: state.count + 1 }\r\n//       case SUB: return { count: state.count - 1 }\r\n//       case ADDSOME: return { count: state.count + action.payload }\r\n//       case SUBSOME: return { count: state.count - action.payload }\r\n//       case RESET: return { count: 0 }\r\n//       default: return state\r\n//     }\r\n// }\r\n\r\n// export default CountReducer;\r\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAC5C,SAASC,GAAG,EAAEC,GAAG,QAAiC,wBAAwB;AAC1E,MAAMC,iBAAiB,GAAC;EAACC,EAAE,EAAC,CAAC;EAACC,QAAQ,EAAC,EAAE;EAACC,KAAK,EAAC,EAAE;EAACC,WAAW,EAAC,EAAE;EAACC,MAAM,EAAC;AAAE,CAAC;AAE5E,MAAMC,SAAS,GAACT,WAAW,CAAC;EACxBU,IAAI,EAAC,QAAQ;EACbC,YAAY,EAAC;IAACC,KAAK,EAAC;MAACR,EAAE,EAAC,CAAC;MAACC,QAAQ,EAAC,EAAE;MAACC,KAAK,EAAC,EAAE;MAACC,WAAW,EAAC,EAAE;MAACC,MAAM,EAAC;IAAE;EAAC,CAAC;EACzEK,QAAQ,EAAC;IACLC,QAAQ,EAACA,CAACC,KAAK,EAACC,MAAM,KAAG;MACrB,QAAQA,MAAM,CAACC,IAAI;QACf,KAAKhB,GAAG;UAAE,OAAO;YAAEK,KAAK,EAAEU,MAAM,CAACE;UAAQ,CAAC;QAC1C,KAAKhB,GAAG;UAAE,OAAO;YAAEK,WAAW,EAACS,MAAM,CAACE;UAAQ,CAAC;QAC/C;QACA;QACA;QACA;UAAS,OAAOH,KAAK;MACvB;MACF;IACJ,CAAC;IACDI,MAAM,EAAEJ,KAAK,IAAG;MACZA,KAAK,CAACH,KAAK,GAACT,iBAAiB;IACjC;EACJ;AAEJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACW,QAAQ;EAACK;AAAM,CAAC,GAAEV,SAAS,CAACW,OAAO;AAEjD,eAAeX,SAAS,CAACY,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}