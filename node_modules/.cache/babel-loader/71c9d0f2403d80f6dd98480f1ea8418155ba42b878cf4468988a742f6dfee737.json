{"ast":null,"code":"var _jsxFileName = \"D:\\\\Patch\\\\react\\\\react-auth\\\\src\\\\pages\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useTable } from \"react-table\";\n\n// const TaskList = (props:{name:string}) => {\n\n//   const data = React.useMemo(\n//     () => [\n//       {\n//         col1: 'Minsk',\n//         col2: '27',\n//         col3: 'rain',\n//       },\n//       {\n//         col1: 'Vilnius',\n//         col2: '30',\n//         col3: 'rain',\n//       },\n//       {\n//         col1: 'London',\n//         col2: '23',\n//         col3: 'rain',\n//       },\n//     ],\n//     []\n// )\n\n// const columns = React.useMemo(\n//     () => [\n//       {\n//         Header: 'City',\n//         accessor: 'col1', // accessor is the \"key\" in the data\n//       },\n//       {\n//         Header: 'Temperature',\n//         accessor: 'col2',\n//       },\n//       {\n//         Header: 'Weather Forecast',\n//         accessor: 'col3', // accessor is the \"key\" in the data\n//       },\n//     ],\n//     []\n// )\n\n// const {\n//   getTableProps,\n//   getTableBodyProps,\n//   headerGroups,\n//   rows,\n//   prepareRow,\n// } = useTable({ columns, data })\n\n//   return (\n//     <table {...getTableProps()}>\n//       <thead>\n//         {headerGroups.map(headerGroup => (\n//           <tr {...headerGroup.getHeaderGroupProps()}>\n//             {headerGroup.headers.map(column => (\n//               <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n//             ))}\n//           </tr>\n//         ))}\n//       </thead>\n//       <tbody {...getTableBodyProps()}>\n//         {rows.map(row => {\n//           prepareRow(row);\n//           return (\n//             <tr {...row.getRowProps()}>\n//               {row.cells.map(cell => (\n//                 <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n//               ))}\n//             </tr>\n//           );\n//         })}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// export default   TaskList;\n\nimport { useTable } from \"react-table\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskList(props) {\n  _s();\n  const data = React.useMemo(() => [{\n    col1: \"Hello\",\n    col2: \"World\"\n  }, {\n    col1: \"react-table\",\n    col2: \"rocks\"\n  }, {\n    col1: \"whatever\",\n    col2: \"you want\"\n  }], []);\n  const columns = React.useMemo(() => [{\n    Header: \"Uuid\",\n    accessor: \"gmuuid\" // accessor is the \"key\" in the data\n  }, {\n    Header: \"Column 2\",\n    accessor: \"col2\"\n  }], []);\n  const options = {\n    data,\n    columns\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable(options);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.name ? 'Task page ' + props.name : 'Not validat user'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      style: {\n        border: \"solid 1px blue\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            style: {\n              borderBottom: \"solid 3px red\",\n              background: \"aliceblue\",\n              color: \"black\",\n              fontWeight: \"bold\"\n            },\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                ...cell.getCellProps(),\n                style: {\n                  padding: \"10px\",\n                  border: \"solid 1px gray\",\n                  background: \"papayawhip\"\n                },\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"yUv2MES2hPq5sF2EYQ88uKBmXaI=\", false, function () {\n  return [useTable];\n});\n_c = TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useTable","React","jsxDEV","_jsxDEV","TaskList","props","_s","data","useMemo","col1","col2","columns","Header","accessor","options","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","children","name","fileName","_jsxFileName","lineNumber","columnNumber","style","border","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding","_c","$RefreshReg$"],"sources":["D:/Patch/react/react-auth/src/pages/TaskList.tsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useTable } from \"react-table\";\r\n \r\n\r\n \r\n\r\n\r\n// const TaskList = (props:{name:string}) => {\r\n\r\n\r\n//   const data = React.useMemo(\r\n//     () => [\r\n//       {\r\n//         col1: 'Minsk',\r\n//         col2: '27',\r\n//         col3: 'rain',\r\n//       },\r\n//       {\r\n//         col1: 'Vilnius',\r\n//         col2: '30',\r\n//         col3: 'rain',\r\n//       },\r\n//       {\r\n//         col1: 'London',\r\n//         col2: '23',\r\n//         col3: 'rain',\r\n//       },\r\n//     ],\r\n//     []\r\n// )\r\n\r\n// const columns = React.useMemo(\r\n//     () => [\r\n//       {\r\n//         Header: 'City',\r\n//         accessor: 'col1', // accessor is the \"key\" in the data\r\n//       },\r\n//       {\r\n//         Header: 'Temperature',\r\n//         accessor: 'col2',\r\n//       },\r\n//       {\r\n//         Header: 'Weather Forecast',\r\n//         accessor: 'col3', // accessor is the \"key\" in the data\r\n//       },\r\n//     ],\r\n//     []\r\n// )\r\n\r\n// const {\r\n//   getTableProps,\r\n//   getTableBodyProps,\r\n//   headerGroups,\r\n//   rows,\r\n//   prepareRow,\r\n// } = useTable({ columns, data })\r\n\r\n\r\n//   return (\r\n//     <table {...getTableProps()}>\r\n//       <thead>\r\n//         {headerGroups.map(headerGroup => (\r\n//           <tr {...headerGroup.getHeaderGroupProps()}>\r\n//             {headerGroup.headers.map(column => (\r\n//               <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n//             ))}\r\n//           </tr>\r\n//         ))}\r\n//       </thead>\r\n//       <tbody {...getTableBodyProps()}>\r\n//         {rows.map(row => {\r\n//           prepareRow(row);\r\n//           return (\r\n//             <tr {...row.getRowProps()}>\r\n//               {row.cells.map(cell => (\r\n//                 <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n//               ))}\r\n//             </tr>\r\n//           );\r\n//         })}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// export default   TaskList;\r\n\r\n\r\nimport { useTable, TableOptions, Column } from \"react-table\";\r\nimport React from \"react\";\r\n\r\ntype Cols = { col1: string; col2: string };\r\n\r\nexport default function TaskList(props:{name:string}) {\r\n  const data = React.useMemo(\r\n    (): Cols[] => [\r\n      {\r\n        col1: \"Hello\",\r\n        col2: \"World\"\r\n      },\r\n      {\r\n        col1: \"react-table\",\r\n        col2: \"rocks\"\r\n      },\r\n      {\r\n        col1: \"whatever\",\r\n        col2: \"you want\"\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const columns: Column<{ col1: string; col2: string }>[] = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Uuid\",\r\n        accessor: \"gmuuid\" // accessor is the \"key\" in the data\r\n      },\r\n      {\r\n        Header: \"Column 2\",\r\n        accessor: \"col2\"\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const options: TableOptions<{ col1: string; col2: string }> = {\r\n    data,\r\n    columns\r\n  };\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow\r\n  } = useTable(options);\r\n\r\n  return (\r\n    <div>\r\n\r\n  \r\n    <div>{props.name?'Task page '+props.name:'Not validat user'}</div>\r\n    <table {...getTableProps()} style={{ border: \"solid 1px blue\" }}>\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <th\r\n                {...column.getHeaderProps()}\r\n                style={{\r\n                  borderBottom: \"solid 3px red\",\r\n                  background: \"aliceblue\",\r\n                  color: \"black\",\r\n                  fontWeight: \"bold\"\r\n                }}\r\n              >\r\n                {column.render(\"Header\")}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map((cell) => {\r\n                return (\r\n                  <td\r\n                    {...cell.getCellProps()}\r\n                    style={{\r\n                      padding: \"10px\",\r\n                      border: \"solid 1px gray\",\r\n                      background: \"papayawhip\"\r\n                    }}\r\n                  >\r\n                    {cell.render(\"Cell\")}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA;AACA;;AAMA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,QAAQ,QAA8B,aAAa;AAC5D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1B,eAAe,SAASC,QAAQA,CAACC,KAAmB,EAAE;EAAAC,EAAA;EACpD,MAAMC,IAAI,GAAGN,KAAK,CAACO,OAAO,CACxB,MAAc,CACZ;IACEC,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE;EACR,CAAC,EACD;IACED,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE;EACR,CAAC,EACD;IACED,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE;EACR,CAAC,CACF,EACD,EACF,CAAC;EAED,MAAMC,OAAiD,GAAGV,KAAK,CAACO,OAAO,CACrE,MAAM,CACJ;IACEI,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE,QAAQ,CAAC;EACrB,CAAC,EACD;IACED,MAAM,EAAE,UAAU;IAClBC,QAAQ,EAAE;EACZ,CAAC,CACF,EACD,EACF,CAAC;EAED,MAAMC,OAAqD,GAAG;IAC5DP,IAAI;IACJI;EACF,CAAC;EAED,MAAM;IACJI,aAAa;IACbC,iBAAiB;IACjBC,YAAY;IACZC,IAAI;IACJC;EACF,CAAC,GAAGnB,QAAQ,CAACc,OAAO,CAAC;EAErB,oBACEX,OAAA;IAAAiB,QAAA,gBAGAjB,OAAA;MAAAiB,QAAA,EAAMf,KAAK,CAACgB,IAAI,GAAC,YAAY,GAAChB,KAAK,CAACgB,IAAI,GAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAClEtB,OAAA;MAAA,GAAWY,aAAa,CAAC,CAAC;MAAEW,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAiB,CAAE;MAAAP,QAAA,gBAC9DjB,OAAA;QAAAiB,QAAA,EACGH,YAAY,CAACW,GAAG,CAAEC,WAAW,iBAC5B1B,OAAA;UAAA,GAAQ0B,WAAW,CAACC,mBAAmB,CAAC,CAAC;UAAAV,QAAA,EACtCS,WAAW,CAACE,OAAO,CAACH,GAAG,CAAEI,MAAM,iBAC9B7B,OAAA;YAAA,GACM6B,MAAM,CAACC,cAAc,CAAC,CAAC;YAC3BP,KAAK,EAAE;cACLQ,YAAY,EAAE,eAAe;cAC7BC,UAAU,EAAE,WAAW;cACvBC,KAAK,EAAE,OAAO;cACdC,UAAU,EAAE;YACd,CAAE;YAAAjB,QAAA,EAEDY,MAAM,CAACM,MAAM,CAAC,QAAQ;UAAC;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRtB,OAAA;QAAA,GAAWa,iBAAiB,CAAC,CAAC;QAAAI,QAAA,EAC3BF,IAAI,CAACU,GAAG,CAAEW,GAAG,IAAK;UACjBpB,UAAU,CAACoB,GAAG,CAAC;UACf,oBACEpC,OAAA;YAAA,GAAQoC,GAAG,CAACC,WAAW,CAAC,CAAC;YAAApB,QAAA,EACtBmB,GAAG,CAACE,KAAK,CAACb,GAAG,CAAEc,IAAI,IAAK;cACvB,oBACEvC,OAAA;gBAAA,GACMuC,IAAI,CAACC,YAAY,CAAC,CAAC;gBACvBjB,KAAK,EAAE;kBACLkB,OAAO,EAAE,MAAM;kBACfjB,MAAM,EAAE,gBAAgB;kBACxBQ,UAAU,EAAE;gBACd,CAAE;gBAAAf,QAAA,EAEDsB,IAAI,CAACJ,MAAM,CAAC,MAAM;cAAC;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClB,CAAC;YAET,CAAC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAET,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV;AAACnB,EAAA,CAlGuBF,QAAQ;EAAA,QA4C1BJ,QAAQ;AAAA;AAAA6C,EAAA,GA5CUzC,QAAQ;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}